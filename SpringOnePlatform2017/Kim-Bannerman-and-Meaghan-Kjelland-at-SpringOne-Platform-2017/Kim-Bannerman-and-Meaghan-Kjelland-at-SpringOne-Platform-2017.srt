1
00:00:00,000 --> 00:00:03,380
피보탈
(번역: yjeong@pivotal.io)

2
00:00:03,780 --> 00:00:05,600
숙녀 신사 여러분,

3
00:00:05,600 --> 00:00:08,360
구글의 Head of Technical Customer Engagement를 맡고있는

4
00:00:08,600 --> 00:00:11,000
킴 배너만, 그리고 구글의 소프트웨어 엔지니어인

5
00:00:11,000 --> 00:00:13,040
메건 쉘런드를 박수로 맞아주세요!

6
00:00:13,260 --> 00:00:16,900
[둠 칫칫 둠둠 칫]

7
00:00:17,100 --> 00:00:20,280
[연사들 무대로 등장]

8
00:00:21,360 --> 00:00:23,360
안녕하세요

9
00:00:27,520 --> 00:00:30,200
음, 제임스 워터스의 훌륭한 소개에

10
00:00:30,220 --> 00:00:32,240
정말 감사드립니다

11
00:00:32,700 --> 00:00:35,800
피보탈의 몇몇 다른 분들도 마찬가지겠죠

12
00:00:35,800 --> 00:00:39,360
오늘 이 자리에서 PKS에 대해 이야기 할 수 있어 좋네요

13
00:00:39,360 --> 00:00:41,500
아마 여기 계신 몇몇 분들은 이미

14
00:00:41,500 --> 00:00:44,500
몇달 전 라스베가스에서 열린 VMWorld에서 이미 들으셨겠지만

15
00:00:44,500 --> 00:00:48,020
vmware, 구글, 그리고 피보탈이 함께 PKS를 발표했습니다

16
00:00:48,500 --> 00:00:51,160
PKS 의 코드는 프로덕션 단계에 있구요

17
00:00:51,160 --> 00:00:54,320
잠시후 메간을 통해 어떻게 동작하는지 보실 수 있습니다

18
00:00:54,340 --> 00:00:56,680
음, 메간은 Kubo 팀에 소속되어 있기도 하구요

19
00:00:56,700 --> 00:00:59,920
이를 위해 피보탈과 약 1년 전부터 협업해 왔습니다

20
00:00:59,920 --> 00:01:02,920
Kubo, 그리고 PKS는

21
00:01:02,920 --> 00:01:05,880
큐버네티스를 운용하는 훌륭한 도구로 발전하고 있구요

22
00:01:05,880 --> 00:01:08,680
이전 세션에서 설명된 클라우드 파운드리 패밀리에서

23
00:01:08,680 --> 00:01:12,000
컨테이너의 운용을 담당하는 도구 입니다.

24
00:01:13,100 --> 00:01:16,400
PKS의 핵심이라고 볼 수 있는 부분은

25
00:01:16,580 --> 00:01:19,300
'GKE", 즉 'GKE는 구글 큐버네티스 엔진' 과

26
00:01:19,300 --> 00:01:22,120
PKS의 일관적인 호환성이라고 할 수 있습니다

27
00:01:22,120 --> 00:01:24,080
이게 무슨말인가 하면,

28
00:01:24,100 --> 00:01:28,680
PKS의 사용자는 GKE의 사용자와 동일한 'Day 2'를 경험할 수 있는것입니다

29
00:01:29,100 --> 00:01:32,040
워크로드의 요구사항에 따라 자동으로 확장이 가능하고,

30
00:01:32,040 --> 00:01:34,060
자동으로 노드들을 새로운 큐버네티스 버전으로

31
00:01:34,060 --> 00:01:35,600
업그레이드 할 수 있습니다

32
00:01:35,600 --> 00:01:37,120
사실 이건 엄청난거죠

33
00:01:37,120 --> 00:01:41,000
또한 고장난 노드들을 자동으로 복구하고  문제를 해결합니다

34
00:01:41,000 --> 00:01:43,020
오늘날 시장에서 이러한

35
00:01:43,040 --> 00:01:46,320
기능성을 제공하는 다른 컨테이너 도구는 없습니다

36
00:01:47,860 --> 00:01:51,100
이제부터 메간이 PKS '마술'을 좀 보여드릴거에요

37
00:01:51,100 --> 00:01:54,880
어, 제가 이제부터 큐버네티스의 카탈로그 서비스를 보여드릴건데

38
00:01:54,880 --> 00:01:57,620
GCP서비스 브로커와 큐버네티스를 사용합니다

39
00:01:57,640 --> 00:02:00,120
이건 GCP 서비스와

40
00:02:00,120 --> 00:02:02,320
이 서비스를 사용하는 애플리케이션을 배포하는거죠

41
00:02:02,320 --> 00:02:04,900
동일한 데모를 GKE와 PKS에서 모두 진행할께요

42
00:02:04,900 --> 00:02:07,540
사실 이건 엄청 멋진건데 왜냐하면

43
00:02:07,540 --> 00:02:11,600
온-프레미스와 GCP에서 '똑같은' 방법을 사용할 수 있기 때문이에요

44
00:02:12,380 --> 00:02:14,380
음 시작하기 전에

45
00:02:14,380 --> 00:02:17,420
데모를 어떻게 더 효과적으로 보여드릴건지 생각해 봤는데

46
00:02:17,420 --> 00:02:20,520
그래서 이제 PKS 클러스터 노드중 하나를 중지할거에요

47
00:02:20,520 --> 00:02:22,400
동작하는 클러스터에서요.

48
00:02:22,400 --> 00:02:24,120
시작하겠습니다

49
00:02:26,040 --> 00:02:27,040
아 죄송합니다

50
00:02:27,380 --> 00:02:28,640
VM을 삭제하구요

51
00:02:29,120 --> 00:02:31,320
여기 윗쪽에서는 watch 를 구동해서

52
00:02:31,720 --> 00:02:34,860
'bosh vms' 를 볼건데, 어?!? 
(bosh로 배포된 vm 클러스터 리스트 확인 도구)

53
00:02:35,140 --> 00:02:37,200
아, (bosh에) 로그인을 안했네요

54
00:02:40,260 --> 00:02:42,560
어, 그럼 watch는 안볼래요 
[데헷]

55
00:02:43,240 --> 00:02:46,740
음 아까 보신 명령어를 통해 클러스터의 노드 하나를 강제 종료 했는데

56
00:02:47,100 --> 00:02:49,960
사실 별로 이게 겁나지 않는건 BOSH가

57
00:02:49,960 --> 00:02:53,020
뒤에서 동작 중이고, 클러스터의 노드가 중지된 사실을 감지해서

58
00:02:53,020 --> 00:02:55,060
없어진 VM을 다시 배포해 주기 때문이에요

59
00:02:55,060 --> 00:02:56,880
그래서 시작할때 1개의 VM을 중지했음에도 불구하고

60
00:02:56,880 --> 00:02:58,880
현재 3개의 워커 노드가 정상적으로 동작하고 있는걸 볼 수 있어요

61
00:02:59,240 --> 00:03:02,140
음 첫번째 데모는 GKE를 사용할건데요

62
00:03:02,140 --> 00:03:07,160
이를 위해서 kubectl을 설정할게요

63
00:03:13,080 --> 00:03:16,280
그리고 스프링 샘플 앱인 '펫 클리닉'을 배포할건데

64
00:03:16,280 --> 00:03:18,800
데모를 위해서 제가 pub/sub을 사용하도록 수정한 버전이에요

65
00:03:18,820 --> 00:03:22,580
그러니 첫째로 pub/sub 인스턴스를 클러스터에 생성합니다

66
00:03:27,460 --> 00:03:29,620
spec이 어떻게 구성되었는지 살펴보죠

67
00:03:33,120 --> 00:03:35,240
네 여기서 설정된 내용은

68
00:03:35,240 --> 00:03:37,840
여기는 요 클래스를 사용한 서비스 플랜을

69
00:03:38,000 --> 00:03:41,380
이 위에 있는 인스턴스 이름으로 생성합니다

70
00:03:42,240 --> 00:03:45,440
비동기로 동작하니까, 음 어떤 상태인지 살펴보죠

71
00:03:53,640 --> 00:03:56,140
멋지네요. 여기 보시면 인스턴스 생성 요청이 성공적이고

72
00:03:56,160 --> 00:03:58,460
비동기로 진행되고 있으며 아직 생성이 완료되지 않음을 볼수 있어요

73
00:03:58,460 --> 00:04:00,920
음 이 작업이 완료될 동안 다른걸 보여드릴께요

74
00:04:01,760 --> 00:04:05,220
바로 서비스 브로커가 어떻게 인스톨 되었는지에 대한겁니다

75
00:04:07,900 --> 00:04:10,740
여기 GCP 서비스 브로커는

76
00:04:10,740 --> 00:04:12,660
여기 클러스터  서비스 브로커 오브젝트가

77
00:04:12,660 --> 00:04:14,780
서비스 카탈로그를 통해 추가된 것입니다

78
00:04:18,060 --> 00:04:19,060
멋져요

79
00:04:19,740 --> 00:04:22,820
네 이제 (pub/sub)인스턴스가 성공적으로 준비됬구요

80
00:04:22,820 --> 00:04:26,180
이 인스턴스의 토픽을 바인딩 해 보도록 하겠습니다

81
00:04:31,880 --> 00:04:32,880
웁스

82
00:04:37,560 --> 00:04:40,240
음 이 부분을 좀 살펴보면

83
00:04:40,240 --> 00:04:43,720
먼저 방금 생성한 인스턴스의 이름을 이 부분에서 참조하구요

84
00:04:43,860 --> 00:04:46,880
그리고 이 인스턴스에 토픽을 만듭니다

85
00:04:46,880 --> 00:04:50,060
'토픽'을 의미하는 퍼블리셔를 바인딩 타입으로 지정했구요

86
00:04:50,060 --> 00:04:53,100
서비스 브로커는 여기 지정된 어카운트 정보를 사용합니다

87
00:04:55,800 --> 00:04:58,580
그럼 이 과정들이 성공적으로 되었는지 체크해보죠

88
00:04:58,580 --> 00:05:00,340
몇초 정도 더 걸려야 할것 같지만 음.

89
00:05:05,420 --> 00:05:08,320
네 여기 보시면 'Injected bind result' 가 나와있는데

90
00:05:08,320 --> 00:05:10,880
이건 큐버네티스 클러스터에 이 바인딩 정보가 담긴

91
00:05:10,880 --> 00:05:13,080
비밀 오브젝트가 생성되었다는 의미입니다

92
00:05:13,100 --> 00:05:16,080
그리고 이걸 제 '펫' 앱에서 가져다 사용할 수 있는데 좀 이따가 보여드릴게요

93
00:05:16,240 --> 00:05:18,660
이제 subscription을 생성하면

94
00:05:18,980 --> 00:05:20,060
엄..

95
00:05:21,020 --> 00:05:25,100
앱을 통해 토픽에 publishing 된 내용을 가져올 수 있습니다

96
00:05:26,940 --> 00:05:29,880
이것도 앞에 보신 publisher 매우 비슷한데

97
00:05:31,560 --> 00:05:34,960
바인드 타입을 subscriber 로 지정한 부분만 다릅니다

98
00:05:38,960 --> 00:05:41,680
사실 subscriber 생성 작업은 조금 더 오래 걸릴테니

99
00:05:41,680 --> 00:05:44,120
pubsub 으로부터 pull을 처리한 스크립트를 함꼐 살펴보시죠

100
00:05:44,240 --> 00:05:46,260
어떻게 동작하는지 알 수 있을거에요

101
00:05:46,380 --> 00:05:51,120
바인딩은 생성된 토픽에 대한 정보가 담긴 시크릿 오브젝트를 생성하고

102
00:05:51,120 --> 00:05:53,980
이걸 통해 subscription 처리에 필요한 정보를

103
00:05:54,000 --> 00:05:56,980
json 으로  받아와서 디코드 하고

104
00:05:56,980 --> 00:06:00,720
G Cloud CLI 를 사용해서 pull 하는 구조입니다

105
00:06:05,000 --> 00:06:06,100
아~

106
00:06:24,180 --> 00:06:25,640
네 이제 Injected bind Result 정보가 있죠

107
00:06:25,640 --> 00:06:27,060
subscriber가 잘 생성되었다는 의미입니다

108
00:06:27,140 --> 00:06:30,000
그리고 좀 전에 보신 스크립트를 써서 토픽에 뭐가 들었는지 볼까요

109
00:06:30,000 --> 00:06:32,600
아직 아무것도 퍼블리싱 하지 않았으니 아무것도 없겠죠?

110
00:06:33,720 --> 00:06:35,720
네 그래서 0 아이템이 리턴됩니다

111
00:06:35,720 --> 00:06:38,020
이제 실제 애플리케이션을 배포해서

112
00:06:38,020 --> 00:06:40,040
pubsub을 어떻게 하는지 보겠습니다

113
00:06:51,600 --> 00:06:53,140
이게 하는 일은

114
00:06:53,240 --> 00:06:55,520
docker hub에 있는 이미지를 가져다가

115
00:06:55,520 --> 00:06:57,840
큐버네티스에 배포합니다

116
00:06:58,460 --> 00:07:00,700
그리고 시스템 환경변수를 사용해서

117
00:07:00,700 --> 00:07:02,600
토픽의 이름을 앱에 전달하고

118
00:07:02,600 --> 00:07:05,540
이건 바인딩이 생성한 비밀 오브젝트에 담긴 정보를 가져온 겁니다

119
00:07:05,600 --> 00:07:08,860
그리고 여기 GOOGLE_APPLICATION_CREDENTIAL 환경 변수는

120
00:07:08,860 --> 00:07:12,300
또 다른 비밀 정보를 담고 있는데

121
00:07:12,440 --> 00:07:15,300
구글 서비스를 사용하기 위해 이전에 생성한 계정 정보입니다

122
00:07:15,580 --> 00:07:18,980
그리고 pubsub 서비스에 접근하는데도 사용합니다

123
00:07:20,140 --> 00:07:21,460
자 이제,

124
00:07:22,360 --> 00:07:25,580
제가 생성해 놓은 큐버네티스 클러스터에 방금 배포된 '펫'앱의

125
00:07:25,580 --> 00:07:27,960
IP 정보를 가져옵니다

126
00:07:32,100 --> 00:07:33,100
 

127
00:07:33,680 --> 00:07:37,740
그래서 이 IP주소를 통해 방금 배포한 앱에 접근할 수 있겠죠

128
00:07:39,420 --> 00:07:42,360
네. 여기 스프링 샘플 앱인 '펫 클리닉'을 보실 수 있구요

129
00:07:42,600 --> 00:07:45,660
사용자가 자신의 펫을 추가하면

130
00:07:45,660 --> 00:07:48,640
그 정보가 pubsub 인스턴스로 유입되고

131
00:07:48,640 --> 00:07:50,960
친구들에게 새로운 펫이 생긴걸 알고 싶다면

132
00:07:50,960 --> 00:07:52,660
'알림' 버튼을 누르면 되겠죠

133
00:07:52,900 --> 00:07:55,680
데모로 '조지 프랭클린'이라는 사용자의 펫을 추가해 볼건데요

134
00:07:55,680 --> 00:07:57,000
'dog' 가 이름이고

135
00:07:57,740 --> 00:08:00,480
생일을 입력해야 하구요,

136
00:08:00,480 --> 00:08:01,860
웃기긴 하지만 사실 얜 고양이에요

137
00:08:02,060 --> 00:08:03,060
[웃음]

138
00:08:03,380 --> 00:08:06,020
자 그럼 이제 subscription에서 pull 을 해 볼께요

139
00:08:06,020 --> 00:08:07,780
한개의 메세지가 있어야 정상이죠

140
00:08:08,400 --> 00:08:11,680
예, 조지 프랭클린의 새로운 고양이는 'dog' 라고 나오네요

141
00:08:12,120 --> 00:08:15,620
이 사람의 고양이 이름이 'dog' 라니 웃기다고 생각할 겁니다

142
00:08:16,560 --> 00:08:18,660
네, 지금까지 보신게 GKE 입니다.

143
00:08:18,660 --> 00:08:20,680
자 그럼 PKS는 어떨까요

144
00:08:21,020 --> 00:08:24,920
왼쪽 브라우저를 보시면 PKS타일을 사용해서

145
00:08:24,920 --> 00:08:26,800
PKS API를 사용할 수 있구요

146
00:08:27,300 --> 00:08:30,960
이 API를 사용해서 제 PKS 클러스터를 이미 만들어 놓았습니다

147
00:08:31,260 --> 00:08:35,500
그리고 이 클러스터를 사용하기 위해 아까처럼 kubectl을 수행하구요

148
00:08:37,420 --> 00:08:39,060
스크립트를 보여드릴께요

149
00:08:39,400 --> 00:08:41,760
어떤 API 를 사용하는지 볼 수 있습니다

150
00:08:44,420 --> 00:08:48,500
보시면 curl 명령을 사용해서 PKS API를 사용했는데요

151
00:08:48,920 --> 00:08:51,360
이를 통해서 바인딩 정보를 얻어올 수 있습니다

152
00:08:51,360 --> 00:08:54,340
그리고 암호화된 정보를 가져오기 위해 bosh-cli 를 사용했어요

153
00:08:54,340 --> 00:08:57,000
이렇게 가져온 정보는 kubectl 설정에 사용되고

154
00:08:57,000 --> 00:08:59,400
클러스터에 원하는 동작을 수행할 수 있게 합니다

155
00:09:01,680 --> 00:09:04,120
네, 이제 스크립트를 실행했습니다

156
00:09:04,120 --> 00:09:06,680
이제 저는 PKS 클러스터를 사용할 수 있겠죠

157
00:09:09,020 --> 00:09:12,000
그리고 데모를 위해 여러분이 좀 전에 보셨던것과 동일한

158
00:09:12,000 --> 00:09:14,160
애플리케이션을 배포했고, 이미 동작하고 있습니다.

159
00:09:16,620 --> 00:09:19,620
네 그리고 여기 보시면 아까와 다른 IP 주소를 볼 수 있어요

160
00:09:19,620 --> 00:09:22,420
이 주소로 접근하면 아까와 동일한 애플리케이션을

161
00:09:22,420 --> 00:09:24,860
다른 클러스터에서 구동하고 있기 때문에

162
00:09:24,860 --> 00:09:27,480
보셨던 'dog'라는 이름의 고양이 정보는 나타나지 않아요

163
00:09:28,180 --> 00:09:30,900
해서 여기에 새로운 펫을 추가하면

164
00:09:30,900 --> 00:09:32,400
이번엔 'dog' 라는 이름의

165
00:09:33,580 --> 00:09:36,340
강아지를 추가 합니다.

166
00:09:36,340 --> 00:09:37,460
이상하죠?

167
00:09:38,400 --> 00:09:41,180
그래서 아까와 동일하게 subscription 을 통해 pull 해 보면

168
00:09:41,180 --> 00:09:43,660
리턴되는 값이...

169
00:09:44,680 --> 00:09:47,480
네 메세지는 조지 프랭클린이 'dog'라는 이름의 강아지를 추가했네요

170
00:09:47,480 --> 00:09:49,720
강아지 이름으로는 좀 이상하긴 합니다만 
[웃음]

171
00:09:50,460 --> 00:09:51,600
암...

172
00:09:52,980 --> 00:09:53,980
멋지죠?

173
00:09:54,360 --> 00:09:56,940
제가 준비한 내용은 여기까지 입니다

174
00:09:57,300 --> 00:10:02,400
[우뢰와 같은 박수]

175
00:10:02,940 --> 00:10:05,480
네, 여러분은 메간의 pub/sub 스프링 앱을 보셨습니다

176
00:10:05,480 --> 00:10:07,580
또 하나 좋은 소식은

177
00:10:07,580 --> 00:10:10,520
PKS의 사용자 분들은 GCP의

178
00:10:10,540 --> 00:10:13,460
전체 서비스 카탈로그를 사용하실 수 있습니다

179
00:10:13,460 --> 00:10:15,760
즉, 여러분은 Google 스패너 서비스,

180
00:10:15,760 --> 00:10:18,980
비관계형 디비의 성능을 가진 글로벌 일관성을 지원하는 관계형 데이터베이스 및

181
00:10:18,980 --> 00:10:21,940
Google 번역기 API를

182
00:10:21,940 --> 00:10:24,860
몇번의 클릭으로 여러분의 스프링 앱과 연동해서

183
00:10:24,860 --> 00:10:27,920
전세계의 언어에 대해 번역 서비스를 제공할 수도 있습니다

184
00:10:29,380 --> 00:10:32,260
저희 구글은 피보탈과 함께 시장에 진출하는 것에 매우 큰 기대가 있습니다

185
00:10:32,260 --> 00:10:34,520
현재로서 1년 이상된 이 파트너쉽은

186
00:10:34,520 --> 00:10:36,480
아마 그보다 좀 더 오래된것 같지만

187
00:10:36,860 --> 00:10:39,940
고객분들의 일관된 경험을 위해 피보탈과 구글이 함께 일하고 있구요

188
00:10:40,560 --> 00:10:43,880
이는 어제 발표된 PCF 2.0에 모두 적용되고 있습니다

189
00:10:43,880 --> 00:10:47,100
여러분은 GCP 환경 위에 PCF 2.0을 60일간 사용할 수 있는데

190
00:10:47,100 --> 00:10:50,220
구글에서 모든 비용을 지원 합니다.

191
00:10:50,640 --> 00:10:53,480
여러분들은 GCP 서비스 브로커 역시 사용이 가능한데

192
00:10:53,480 --> 00:10:56,760
만약 이미 GKE를 사용해서 애플리케이션을 구성한 경우에도

193
00:10:56,760 --> 00:10:59,400
PKS와 완벽한 호환성을 제공하기 때문에, 이전을 원하는 경우에도

194
00:10:59,420 --> 00:11:02,040
여러분의 기술팀의 일을 쉽게 만들어 드릴겁니다

195
00:11:02,060 --> 00:11:04,580
그리고 내년까지는 더 많은 내용이 추가될거에요

196
00:11:04,980 --> 00:11:06,820
마치면서 드리고 싶은 말씀은

197
00:11:07,080 --> 00:11:09,160
우리는 항상 '추상화'  계층에 대해 말하곤 합니다

198
00:11:09,160 --> 00:11:12,180
그리고 구글이 VMworlad에서 PKS를 발표한 이후로 듣는것은

199
00:11:12,560 --> 00:11:14,800
많은 분들이 피보탈은 프레임워크 또는

200
00:11:14,800 --> 00:11:17,700
클라우드 파운더리를 플랫폼에수 구글의 경쟁 회사로 생각하지만

201
00:11:17,700 --> 00:11:18,980
하지만 진실은

202
00:11:19,040 --> 00:11:21,180
피보탈과 구글은 비전을 공유하고 있습니다

203
00:11:21,440 --> 00:11:23,180
여러분의 팀은 아마도

204
00:11:23,600 --> 00:11:26,000
서로 굉장히 다른 구성원으로 이루어졌을 겁니다

205
00:11:26,280 --> 00:11:28,600
피보탈과 구글은 현재의 여러분을 만나고자 합니다

206
00:11:28,600 --> 00:11:31,600
여러분께 다양한 옵션과 해결 방법을 제공하기 위한 파트너쉽 입니다

207
00:11:31,940 --> 00:11:34,260
이는 여러분을 더 빠르게 발전할 수 있도록 돕고,

208
00:11:34,260 --> 00:11:36,320
시장에서 승리하도록 하며

209
00:11:36,440 --> 00:11:39,600
이 여정에 피보탈과 함께하게 되어 매우 영광이며

210
00:11:39,600 --> 00:11:42,720
메간과 함께 피보탈과 지난 몇년동안의 파트너쉽을 자랑스럽게 생각합니다

211
00:11:42,740 --> 00:11:45,400
사업적 측면에서 역시

212
00:11:45,400 --> 00:11:47,240
굉장한 기회가 있을거라고 자신합니다.

213
00:11:47,240 --> 00:11:48,680
감사합니다!

214
00:11:48,680 --> 00:11:50,500
고마워요

215
00:11:51,320 --> 00:11:55,100
피보탈 
[세상이 소프트웨어를 만드는 방법을 혁신합니다]

