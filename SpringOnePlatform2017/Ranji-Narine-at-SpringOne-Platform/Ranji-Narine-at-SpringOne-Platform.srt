1
00:00:01,080 --> 00:00:03,080
피보탈
(자막: yjeong@pivotal.io)

2
00:00:03,080 --> 00:00:04,760
신사 숙녀 여러분

3
00:00:04,900 --> 00:00:07,880
Scotia 은행의 제품 기술 부분 부사장,

4
00:00:07,880 --> 00:00:09,760
Ranji Narine 을 박수로 맞아주세요

5
00:00:09,940 --> 00:00:14,920
[음악과 함께 연사 등장]

6
00:00:18,860 --> 00:00:20,860
안녕하세요 여러분

7
00:00:21,360 --> 00:00:23,780
저는 Ranji 구요, 무대에 서게되어 영광입니다

8
00:00:23,880 --> 00:00:25,880
저는 이제부터

9
00:00:26,080 --> 00:00:28,580
굉장한 기술 혁신에 대해 이야기할거에요

10
00:00:28,800 --> 00:00:31,400
제가 일하고 있는 Scotia 은행의 혁신이죠

11
00:00:32,940 --> 00:00:37,380
저는 지난 16년간 자바 프로그래머였습니다

12
00:00:37,440 --> 00:00:39,980
대학 시절부터 말이죠

13
00:00:40,360 --> 00:00:44,620
그리고 저는 굉장히 많은 플랫폼을 사용해왔습니다

14
00:00:44,960 --> 00:00:47,140
그러다가 저는 굉장히 특별한 기회를 마주하게됬는데요

15
00:00:47,140 --> 00:00:48,980
2016년에요

16
00:00:49,680 --> 00:00:51,680
이 특별한 기회란

17
00:00:51,740 --> 00:00:54,620
기술 혁신을 주도하는 역할을 맡게 된 거였어요

18
00:00:54,900 --> 00:00:58,020
이 185년 된 은행에서요

19
00:00:58,360 --> 00:01:00,360
Scotia 은행이죠

20
00:01:01,340 --> 00:01:04,320
우리 은행은 오늘날 2천 4백만명의 고객을 보유하고 있습니다

21
00:01:04,700 --> 00:01:07,720
우리 은행은 50개의 나라에 서비스하고 있구요

22
00:01:08,000 --> 00:01:12,460
그리고 915조원 정도 규모의 자산을 운용하고 있습니다

23
00:01:12,860 --> 00:01:15,300
주요 시장은 북미 지역을 비롯,

24
00:01:15,300 --> 00:01:16,700
라틴 아메리카,

25
00:01:16,700 --> 00:01:17,880
중앙 아메리카,

26
00:01:17,880 --> 00:01:19,140
그리고 캐리비안 지역입니다

27
00:01:19,420 --> 00:01:21,760
그리고 8만 8천명의 임직원이 일하고 있습니다

28
00:01:22,780 --> 00:01:24,780
185년동안 은행을 해 왔구요

29
00:01:25,260 --> 00:01:28,160
9천명의 기술 인력을 보유하고 있으며

30
00:01:28,580 --> 00:01:33,100
그리고 매년 3조 2천억 규모의 IT 비용을 집행하고 있습니다

31
00:01:34,540 --> 00:01:37,800
2015년 우리 은행의 CEO 브라이언은 이렇게 말했습니다

32
00:01:38,260 --> 00:01:40,260
"우리의 사업은 기술 시대에 접어들었다.

33
00:01:40,440 --> 00:01:42,440
우리 제품은 은행이지만,

34
00:01:42,700 --> 00:01:45,420
모든 것들이 기술을 통해 제공되고 있다."

35
00:01:45,920 --> 00:01:48,340
이는 은행 사업을 재정의하는 파격적인 문장입니다

36
00:01:48,540 --> 00:01:52,080
그리고 이런 생각은 기술 혁신으로 가는 문을 열었습니다

37
00:01:52,440 --> 00:01:55,020
우리가 기술 혁신에 대해 이야기 할 때,

38
00:01:55,020 --> 00:01:57,000
몇가지 중요한 목표를 세우게 됩니다

39
00:01:57,000 --> 00:01:58,640
시간 내에 제품을 출시하는 것,

40
00:01:58,680 --> 00:02:01,860
어떤 방법을 사용해야 제품을 보다 빠르게 시장에 반복적으로 출시할 수 있을지,

41
00:02:01,940 --> 00:02:04,320
이를 수행하는데 필요한 비용을 어떻게 줄여야 하는지,

42
00:02:04,480 --> 00:02:06,820
어떻게 운용 효율성을 높일 수 있는지,

43
00:02:07,420 --> 00:02:12,160
우리 개발자들에게 어떤 문화를 제공해야 할지

44
00:02:12,280 --> 00:02:16,260
우리의 개발자들에게 어떻게 하면 높은 사업적 가치가 있는 일에 집중하게 할지

45
00:02:16,440 --> 00:02:19,940
프로덕션으로 가기 위한 디자인, 코드, 빌드, 이 모든 반복 과정에 대한 것이죠

46
00:02:21,520 --> 00:02:26,980
처음 이 일을 맡게되면서 저는 '속도'에 대한 부분을 살펴보았습니다

47
00:02:27,080 --> 00:02:29,080
어떤 부분이 우리를 느리게 하는가

48
00:02:29,200 --> 00:02:31,200
변경 적용을 어떻게 해야 하는지

49
00:02:31,200 --> 00:02:33,020
어떻게 하면 더 빨라질 수 있을지 말이죠

50
00:02:33,960 --> 00:02:37,020
이걸 보면서 제품 배포에 관한 속도에 관한 문제들이

51
00:02:37,020 --> 00:02:40,000
은행 사업 뿐만 아니라 다른 모든 엔터프라이즈에도 해당된다고 생각합니다

52
00:02:40,000 --> 00:02:41,340
많은 조직들이 비슷한 어려움을 가지고 있죠

53
00:02:42,020 --> 00:02:44,980
첫번째는, 코드의 재사용성이 매우 떨어지는 것이었습니다

54
00:02:45,240 --> 00:02:49,420
각각의 팀들은 코드를 쓰고 있지만, 재사용되는 경우는 매우 드물었습니다

55
00:02:49,780 --> 00:02:52,140
두번째는 릴리즈 프로세스 입니다

56
00:02:52,180 --> 00:02:55,540
개발자가 체크인해서 프로덕션으로 배포되기까지

57
00:02:55,640 --> 00:02:57,940
몇일 또는 몇주가 걸렸으며

58
00:02:58,100 --> 00:03:01,800
아주 많은 사람들이 연계되어 수많은 프로세스를 거쳐야 했습니다

59
00:03:02,020 --> 00:03:04,300
이게 저희 코드 릴리즈 프로세스였죠

60
00:03:04,300 --> 00:03:05,820
세번째는,

61
00:03:05,940 --> 00:03:08,720
팀들이 상하 관계에 최적화 되어있는 점이었습니다

62
00:03:08,720 --> 00:03:10,360
네번째는

63
00:03:10,360 --> 00:03:11,680
인프라스트럭쳐였습니다

64
00:03:11,680 --> 00:03:15,080
우리는 인프라스트럭쳐를 필요한때 즉시 제공되길 원했지만

65
00:03:15,360 --> 00:03:21,220
몇일, 몇주 또는 심지어 몇달이 걸리는 경우도 있었습니다

66
00:03:21,540 --> 00:03:23,920
지금까지 말씀드린 모든 것들이 바로 시간,

67
00:03:23,940 --> 00:03:25,940
복잡성, 그리고 비용과 관계된 문제들입니다

68
00:03:26,420 --> 00:03:29,540
새로운 혁신을 주도하는 우리는 다르게 생각할 필요가 있었습니다

69
00:03:29,560 --> 00:03:31,560
다른 방식으로 일할 필요가 있었습니다

70
00:03:31,560 --> 00:03:33,520
그래서 첫번째로 우리가 했던 일은

71
00:03:33,780 --> 00:03:37,420
은행안에 "작은 소프트웨어 회사(조직)"을 만들었습니다

72
00:03:37,420 --> 00:03:39,340
소프트웨어 회사에서 일했던

73
00:03:39,460 --> 00:03:41,520
60명의 개발자들을 고용했습니다

74
00:03:41,520 --> 00:03:43,060
그리고 내부적으로

75
00:03:43,100 --> 00:03:45,100
우리 회사의 목표는 바로,

76
00:03:45,100 --> 00:03:47,100
"API driven Bank" 이며 
(은행 서비스의 API화)

77
00:03:47,100 --> 00:03:49,360
개발된 기술을 "재사용"할 필요가 있다는 점이었습니다

78
00:03:49,360 --> 00:03:51,280
이 API와,

79
00:03:51,280 --> 00:03:52,740
프로덕트 중심의 사상,

80
00:03:52,740 --> 00:03:54,580
은행 제품들의 공유

81
00:03:54,580 --> 00:03:56,340
이를 위한 "플랫폼"이 필요했습니다

82
00:03:56,540 --> 00:03:58,540
그냥 단순한 플랫폼이 아닌,

83
00:03:58,720 --> 00:04:01,920
우리의 개발자들이 사랑하고,

84
00:04:02,260 --> 00:04:05,680
사용이 간단하며 은행 사업을 위해 보안과 신뢰성이 뛰어난 플랫폼이어야 했습니다

85
00:04:07,740 --> 00:04:08,560
하지만

86
00:04:08,800 --> 00:04:12,600
은행에서 이런 플랫폼을 직접 만든다는 것은 엄청나게 어려운 일입니다

87
00:04:12,900 --> 00:04:15,320
엄청나게 많은 의사결정자, 엄청 많은 요구사항들

88
00:04:15,420 --> 00:04:17,420
이로 인해 직접 만드는 것은 매우 어렵고 매우 비싼 접근입니다

89
00:04:17,580 --> 00:04:20,440
이건 우리가 목표로 하는 방향과는 전혀 달랐습니다

90
00:04:20,560 --> 00:04:22,560
그리고 DevOps에 관한 부분이 중요했습니다

91
00:04:22,940 --> 00:04:26,940
9천명의 기술 및 개발관련 임직원 모두가 네트워킹,

92
00:04:27,040 --> 00:04:30,140
인프라스트럭쳐, 보안등과 같은 업무를 해야 하는 것이 아닙니다

93
00:04:30,320 --> 00:04:32,720
이런것들은 플랫폼에 맡기고 싶었습니다

94
00:04:33,400 --> 00:04:36,200
그래서 여러가지 솔루션들을 살펴봤는데요

95
00:04:37,040 --> 00:04:40,880
당시 우리는 2년이 아닌 4개월 안에 제품을 출시해야 했습니다

96
00:04:41,000 --> 00:04:43,120
이 요구사항을 충족할 수 있는 플랫폼이 무엇인지 살펴봤죠

97
00:04:43,120 --> 00:04:44,540
"4개월 안에 프로덕션으로"

98
00:04:44,720 --> 00:04:47,620
매일 매일 코드를 릴리즈 할 수 있는지의 여부도 살폈습니다

99
00:04:48,000 --> 00:04:50,300
은행이 요구하는 수준의 보안, 컴플라이언스를 충족하는 상태에서요

100
00:04:50,760 --> 00:04:53,260
전 세계에 위치한 수백명의 개발자들이

101
00:04:53,260 --> 00:04:55,060
접근해서 개발할 수 있어야 했습니다

102
00:04:55,060 --> 00:04:56,900
클라우드를 사용해야 했구요.

103
00:04:57,920 --> 00:05:00,680
가장 중요한 것은 185년된 은행이기 때문에

104
00:05:00,820 --> 00:05:04,120
역사와 전통 만큼 엄청나게 많은 레거시 시스템과

105
00:05:04,600 --> 00:05:06,960
서로 연동할 수 있는 플랫폼이어야 했습니다

106
00:05:07,260 --> 00:05:09,260
사실 이건 엄청나게 어려운 문제였습니다만,

107
00:05:09,500 --> 00:05:11,500
우리의 굉장한 엔지니어들은

108
00:05:11,840 --> 00:05:13,960
피보탈과의 매우 긴밀한 협업을 통해

109
00:05:14,220 --> 00:05:16,220
우리 은행만의 "클라우드 네이티브 플랫폼"을 만들 수 있었습니다

110
00:05:16,600 --> 00:05:19,520
이 플랫폼의 중심에는 피보탈 클라우드 파운드리가 있습니다

111
00:05:19,520 --> 00:05:21,100
그리고 이 위에는

112
00:05:21,200 --> 00:05:24,060
우리 은행만의 애플리케이션과 서비스 레이어가 있습니다

113
00:05:24,420 --> 00:05:26,420
이 서비스 영역을 우리는 BaaS 라고 부릅니다

114
00:05:26,680 --> 00:05:29,440
"Banking as a Service" 영역이죠

115
00:05:29,620 --> 00:05:31,840
이건 사실 API의 집합(모음)과 같구요

116
00:05:32,020 --> 00:05:35,860
은행이 제공하는 다양한 서비스를 API로 접근할 수 있게 합니다

117
00:05:36,580 --> 00:05:39,120
플랫폼은 개발자들이 코드를 재사용할 수 있도록 하는 동시에

118
00:05:39,280 --> 00:05:42,260
속도감 있게 일할 수 있도록 돕습니다

119
00:05:42,380 --> 00:05:44,380
서비스에 필요한 변경을 빠르게 적용하는 것 같은 일입니다

120
00:05:44,500 --> 00:05:46,500
우리 은행의 많은 개발자들이 스프링 부트를 사용하고 있는데

121
00:05:46,600 --> 00:05:50,120
새롭게 변경된 서비스를 거의 실시간으로 배포하고 있습니다

122
00:05:50,940 --> 00:05:52,940
바로 저희가 찾던 "속도"를 이룰 수 있었던 것입니다

123
00:05:53,600 --> 00:05:58,120
피보탈 클라우드 파운드리 위에서 BaaS를 구동하는 또 다른 장점은

124
00:05:58,180 --> 00:06:00,180
필요한 인프라를 즉시 확보할 수 있다는 점 입니다

125
00:06:00,500 --> 00:06:05,100
플랫폼을 통해 개발자들에게 표준화된 로그 및 성능지표를 제공하고 있습니다

126
00:06:05,180 --> 00:06:07,500
플랫폼에서 동작하는 은행 애플리케이션은 매우 높은 가용성을 가지고 있으며

127
00:06:07,840 --> 00:06:10,340
블루-그린 배포를 처리할 수 있습니다
(무중단 배포 방식의 일종)

128
00:06:10,740 --> 00:06:13,480
이 모든 기능성과 함께 다음장의 다이어그램을 보시면

129
00:06:13,480 --> 00:06:15,220
이 은행 플랫폼이 어떻게 동작하는지 한눈에 보실 수 있습니다

130
00:06:15,340 --> 00:06:17,340
"채널 애플리케이션" 이란게 있구요

131
00:06:17,500 --> 00:06:19,680
이 애플리케이션들은 우리의 BaaS API 를 호출합니다

132
00:06:19,840 --> 00:06:21,840
그럼 이건 종래의 '레거시(또는 기존의)' 미들웨어에 접근하고

133
00:06:21,840 --> 00:06:23,600
이 미들웨어와 연결된 시스템으로부터 원하는 레코드에 접근합니다

134
00:06:23,760 --> 00:06:25,900
그리고 이 모든 것들의 중심에 바로 '속도'가 있습니다

135
00:06:25,900 --> 00:06:27,880
피보탈 클라우드 파운드리의 PAS는 
(Pivotal Application Service)

136
00:06:28,220 --> 00:06:30,720
이 서비스들에 대한 변경 사항을 빠르게 적용할 수 있도록 하며

137
00:06:30,720 --> 00:06:33,480
이 빠른 변경은 은행 애플리케이션들의 개선을 가속화 합니다

138
00:06:33,480 --> 00:06:35,160
그리고 팀이 빠르게 움직일 수 있도록 돕습니다

139
00:06:35,200 --> 00:06:37,420
애플리케이션의 모든 스택을 재구축하지 않아도 되기 때문이죠

140
00:06:37,420 --> 00:06:39,280
플랫폼은 우리가 일하는 방식을 바꾸었습니다

141
00:06:39,760 --> 00:06:42,860
동시에 우리 조직이 기술을 사용하는 방법을 바꾸었습니다

142
00:06:43,480 --> 00:06:45,640
우리가 내부적으로 이야기했던 가장 중요한것중 하나는

143
00:06:45,900 --> 00:06:48,000
매일매일 새로운 기능을 배포할 수 있는가 하는 문제였습니다

144
00:06:48,120 --> 00:06:50,480
이를 위해서 자동화된 CI/CD 파이프라인을 만들었는데

145
00:06:50,540 --> 00:06:53,120
피보탈 클라우드 파운드리와 아주 쉽게, 그리고 아주 잘 동작합니다

146
00:06:53,420 --> 00:06:56,460
이건 시작에서 끝까지 자동화된 파이프라인으로 이루어져 있으며

147
00:06:56,460 --> 00:06:58,280
종래의 다른 파이프라인들과는 다릅니다

148
00:06:58,720 --> 00:07:01,760
우리는 은행 애플리케이션에 사용하는 모든 컨트롤 오브젝트를

149
00:07:01,780 --> 00:07:04,580
코드로 표현해서 자동화된 파이프라인에 적용하고 있습니다

150
00:07:05,280 --> 00:07:06,520
그래서

151
00:07:06,720 --> 00:07:09,860
수많은 사람들이 배포를 위해 지루하고도 반복적인 프로세스를 따르는 대신

152
00:07:10,180 --> 00:07:13,080
이 새로운 자동화 방법을 사용해 '일 배포'를 처리할 수 있었습니다

153
00:07:13,620 --> 00:07:15,620
사람은 아주아주 중요합니다

154
00:07:15,940 --> 00:07:18,320
그래서 우린 '호퍼'라고 불리는 프로그램을 만들었습니다

155
00:07:18,560 --> 00:07:20,560
우리 은행을 위한 일종의 내부교육 프로그램이었는데요

156
00:07:20,760 --> 00:07:22,920
서로 다른 팀들에게 플랫폼 기반의 일종의 무균실과 같은 환경을 제공하고

157
00:07:22,940 --> 00:07:24,940
애플리케이션 개발 및 배포에 처음부터 끝까지 학습하도록 하는것이죠

158
00:07:24,940 --> 00:07:26,680
우린 이 서비스들을 '은행 제품'으로 취급하기 때문입니다

159
00:07:27,700 --> 00:07:31,200
지금까지의 '엄청난' 내용을 바탕으로

160
00:07:31,500 --> 00:07:35,240
저희 개발자들이 어떻게 일하고 있으며, 그 미래는 어떤지 말씀 드리겠습니다

161
00:07:36,080 --> 00:07:42,240
저는 엄청 멋진 애플리케이션을 개발하고 싶고, 플랫폼을 배웠습니다

162
00:07:42,460 --> 00:07:44,460
개발자인 저는 은행 개발 포털에 접근합니다

163
00:07:44,500 --> 00:07:46,500
은행의 IT 포털에 접근해서

164
00:07:46,500 --> 00:07:47,640
"퀘스트" 라고 불리는 시스템에 접근합니다

165
00:07:47,640 --> 00:07:49,340
CDP 플랫폼이죠

166
00:07:50,240 --> 00:07:52,800
몇 초이내에 개발자는 새롭게 만들어진

167
00:07:52,800 --> 00:07:55,160
여러개의 지역에 걸쳐있는 고가용 환경을 가지게 됩니다

168
00:07:55,300 --> 00:07:57,300
이 동작을 위한 아름다운 '마켓플레이스'가 제공되구요

169
00:07:57,300 --> 00:07:59,220
각각의 API 서비스를 위한 카탈로그

170
00:07:59,220 --> 00:08:01,240
개발자들은 이걸 참조해서 자신만의 환경을 만들 수 있죠

171
00:08:01,480 --> 00:08:04,100
지금 보시는 다이어그램은 오늘 다른 세션에서 보셨을텐데요

172
00:08:04,180 --> 00:08:07,240
우리 은행을 위한 '호퍼 스프링 이니셜라이저'를 만들었습니다

173
00:08:07,380 --> 00:08:10,980
이 방법을 사용해 우리 은행에서 사용해야 하는 라이브러리나

174
00:08:10,980 --> 00:08:13,980
특정 서비스를 위한 의존성과 같은 것들을 개발자에게 '패키징'된 상태로 제공할 수 있습니다

175
00:08:14,140 --> 00:08:17,040
일반적인 애자일 사상에서 말하는 바와 같이

176
00:08:17,240 --> 00:08:19,800
코드를 개발하고 주어진 CDP 환경에 push 합니다

177
00:08:20,080 --> 00:08:22,080
이렇게 만들어진 코드는 파이프라인에 수용되고

178
00:08:22,100 --> 00:08:25,120
피보탈 클라우드 파운드리에 배포된 이 코드가 동작하는 서비스는

179
00:08:25,260 --> 00:08:27,520
우리의 "개발 팀"이 직접

180
00:08:27,680 --> 00:08:29,680
개발한 코드를 운영 가능하도록 합니다

181
00:08:29,680 --> 00:08:31,020
프로덕션 환경에서 말이죠

182
00:08:31,640 --> 00:08:33,880
이건 종전과는 아주아주 다른

183
00:08:33,880 --> 00:08:35,600
일하는 방법입니다

184
00:08:35,800 --> 00:08:37,440
그래서 어떻게 되었을까요?

185
00:08:37,620 --> 00:08:39,620
우린 엄청나게 큰 은행인데요

186
00:08:39,960 --> 00:08:43,720
이 플랫폼을 사용하고 나서 10개월이 지난 지금,

187
00:08:43,720 --> 00:08:45,560
29개의 서로 다른일을 하는 팀들이

188
00:08:45,560 --> 00:08:47,360
이 플랫폼을 사용해서 일하고 있습니다

189
00:08:47,520 --> 00:08:50,800
21개의 프로덕션 서비스를 개발하고 운영하는 팀입니다

190
00:08:51,740 --> 00:08:54,500
그리고 이 서비스들은 4개의 다른 국가에 제공되고 있으며

191
00:08:55,120 --> 00:08:58,900
지난달에 3천회의 프로덕션 배포를 수행했습니다

192
00:08:59,100 --> 00:09:01,100
이 숫자들은 굉장합니다.

193
00:09:02,600 --> 00:09:07,780
[청중 박수]

194
00:09:07,780 --> 00:09:09,660
감사합니다

195
00:09:10,140 --> 00:09:14,540
우리는 우리 플랫폼 이름을 "플라토"라고 지었구요

196
00:09:14,800 --> 00:09:17,240
API 주도 은행 사업의 미래이며

197
00:09:17,440 --> 00:09:19,940
은행을 위한 수많은 서비스들을 마켓플레이스 형태로 제공하고

198
00:09:19,940 --> 00:09:21,460
쉽게 사용가능 합니다

199
00:09:21,920 --> 00:09:25,580
그리고 개발 프로세스의 자동화를 매우 중요하게 생각합니다

200
00:09:25,580 --> 00:09:27,120
일의 흐름이죠

201
00:09:27,280 --> 00:09:29,680
마지막으로 말씀 드리고 싶은건 "저희는 채용중 입니다"

202
00:09:29,800 --> 00:09:32,080
말씀드린 내용이 흥미롭다면

203
00:09:32,140 --> 00:09:34,140
망설이지 말고 지원하세요

204
00:09:34,440 --> 00:09:36,440
저를 이 행사에 초대해 주셔서 감사합니다

205
00:09:36,440 --> 00:09:38,060
행사를 즐기시길!

206
00:09:39,160 --> 00:09:41,660
피보탈